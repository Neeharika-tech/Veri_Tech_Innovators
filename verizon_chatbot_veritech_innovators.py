# -*- coding: utf-8 -*-
"""Verizon_ChatBot_VeriTech_Innovators.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZwUkg4BgUQIZSSVgXyJ6z6YvLqOn8YlG
"""

!pip install torch transformers accelerate

!pip install torch transformers accelerate bitsandbytes

!pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121

!pip install -q transformers accelerate optimum bitsandbytes
!pip install -q auto-gptq

!pip install optimum

!pip install optimum[onnxruntime-gpu]

from huggingface_hub import login
login()

!pip install -U optimum transformers accelerate

!pip install pymongo

"""INTEGRATED CODE"""

from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline
import torch
from pymongo import MongoClient

# Load GPTQ quantized Mistral-7B model
model_name = "TheBloke/Mistral-7B-Instruct-v0.1-GPTQ"

# Load tokenizer and model
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    device_map="auto",
    torch_dtype=torch.float16,
    trust_remote_code=True
)

# Create pipeline
mistral_pipe = pipeline(
    "text-generation",
    model=model,
    tokenizer=tokenizer,
    torch_dtype=torch.float16,
)

# Connect to MongoDB Atlas
client = MongoClient('mongodb+srv://pulipakaphanimeghana0106:GsJ5bLAGmYkcs3PE@cluster0.1lup4.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0')
db = client['db1']  # Replace with your database name
verizon_data_collection = db['verizon_data']  # Collection for Verizon plans, phones, and add-ons
user_profiles_collection = db['user_profiles']  # Collection for user profiles

# Fetch Verizon plans, phones, and add-ons from MongoDB
verizon_data = verizon_data_collection.find_one()

# Extract data
verizon_plans = verizon_data.get("plans", {})
verizon_phones = verizon_data.get("phones", [])
addons = verizon_data.get("addons", [])

# Function to generate responses dynamically
def query_mistral(user_profile, user_input):
    profile_context = (
        f"User Profile:\n"
        f"- Account Balance: ${user_profile['AccountBalance']}\n"
        f"- Data Used: {user_profile['DataUsedGB']}GB / {user_profile['DataLimitGB']}GB\n"
        f"- Current Plan: {user_profile['PlanType']}\n"
        f"- Recommended Plan: {user_profile['recommended_plan']}\n"
        f"- Avg Call Minutes: {user_profile['UsagePatterns']['CallMinutes']}\n"
        f"- Avg SMS Count: {user_profile['UsagePatterns']['SMSCount']}\n"
        f"- Avg Streaming Hours: {user_profile['UsagePatterns']['StreamingHours']}\n"
        f"- Avg Gaming Hours: {user_profile['UsagePatterns']['GamingHours']}\n"
        f"- Last Order: {user_profile['RecentOrders'][0]['Product']} - {user_profile['RecentOrders'][0]['OrderStatus']}\n"
        f"- Expected Delivery: {user_profile['RecentOrders'][0]['DeliveryDate']}\n"
        f"- Name: {user_profile['Name']}\n"
        f"- Location: {user_profile['Location']}\n"
        f"- Contact: {user_profile['Email']}\n"
        f"- Lines on Account: {', '.join(user_profile['lines'])}\n\n"
        f"User Query: {user_input}\n"
        f"Assistant:"
    )

    response = mistral_pipe(
        profile_context,
        max_length=500,
        do_sample=True,
        temperature=0.6,
        pad_token_id=tokenizer.eos_token_id,
        truncation=True,
    )[0]["generated_text"]

    if "Assistant:" in response:
        response = response.split("Assistant:")[-1].strip()

    return response

def confirm_exit():
    while True:
        confirm = input("\nAre you sure you want to exit? (yes/no): ")
        if confirm.lower() == "yes":
            print("\nThank you for using Verizon Support! Have a great day! 👋")
            return True
        elif confirm.lower() == "no":
            return False
        else:
            print("Please enter 'yes' or 'no'")

def handle_account_management(user_profile):
    print("\n🤖 Basic Account Management")
    while True:
        user_input = input("\nYou: ")
        if user_input.lower() == "exit":
            if confirm_exit():
                return False
            continue

        response = query_mistral(user_profile, user_input)
        print("Verizon Support Agent:", response)

        if "thank you" in user_input.lower():
            return True

def handle_plan_recommendation(user_profile):
    print("\n🤖 Plan Recommendation")
    while True:
        user_input = input("\nYou: ")
        if user_input.lower() == "exit":
            if confirm_exit():
                return False
            continue

        # Analyze usage and recommend plans
        avg_data = user_profile['UsagePatterns']['StreamingHours']
        current_limit = user_profile['DataLimitGB']

        if avg_data > current_limit:
            for plan, details in verizon_plans.items():
                if details['data_limit'] != "Unlimited" and avg_data <= details['data_limit']:
                    user_profile['recommended_plan'] = f"{plan} - ${details['price']}"
                    break
            else:
                user_profile['recommended_plan'] = f"Unlimited - ${verizon_plans['Unlimited']['price']}"

        response = query_mistral(user_profile, user_input)
        print("Verizon Support Agent:", response)

        if "thank you" in user_input.lower():
            return True

def handle_order_placement(user_profile):
    print("\n🤖 Order Placement and Tracking")
    while True:
        user_input = input("\nYou: ")
        if user_input.lower() == "exit":
            if confirm_exit():
                return False
            continue

        # Show phone options if user is shopping
        if "phone" in user_input.lower():
            print("Verizon Support Agent: Here are some phones based on your budget:")
            for phone in verizon_phones:
                print(f"- {phone['name']} (${phone['price']}): {phone['specs']} ⭐{phone['rating']} - {phone['promotion']}")

        response = query_mistral(user_profile, user_input)
        print("Verizon Support Agent:", response)

        if "thank you" in user_input.lower() or "thankyou" in user_input.lower():
          return True


# Main chat loop
print("🤖 Verizon Support Agent")

# MTN validation loop
while True:
    mtn = input("Hey, Welcome to Verizon's chat bot, Please enter your MTN to proceed further: ")
    if mtn.lower() == "exit":
        if confirm_exit():
            break
        continue

    # Fetch user profile from MongoDB
    user_profile = user_profiles_collection.find_one({"PhoneNumber": mtn})
    if user_profile:
        break
    else:
        print("Oh oh, I am sorry, please enter a valid MTN.")

# Main conversation loop
while True:
    print("\nPlease choose an option:")
    print("1. Basic Account Management")
    print("2. Plan Recommendation")
    print("3. Order Placement and Tracking")
    choice = input("Enter the number of your choice: ")

    if choice.lower() == "exit":
        if confirm_exit():
            break
        continue

    if choice == "1":
        if not handle_account_management(user_profile):
            break
    elif choice == "2":
        if not handle_plan_recommendation(user_profile):
            break
    elif choice == "3":
        if not handle_order_placement(user_profile):
            break
    else:
        print("Invalid choice. Please try again.")

"""FRONT END"""

!pip install websockets nest_asyncio

!pip install jupyter-dash
!npm install react react-dom lucide-react @tailwindcss/forms

!pip install jupyter-dash dash

!pip install ipywidgets

!pip install ipywidgets transformers torch pymongo

import ipywidgets as widgets
from IPython.display import display, clear_output, HTML
from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline
import torch
from pymongo import MongoClient
from datetime import datetime
import json

class VerizonChatbotUI:
    def __init__(self):
        # Initialize Mistral model and MongoDB
        self.setup_model()
        self.setup_mongodb()

        # Style definitions - Using a more modern color scheme
        self.style = """
        <style>
        .custom-button {
            background-color: #2563eb;
            color: white;
            border-radius: 8px;
            padding: 8px 16px;
            transition: all 0.3s;
        }
        .custom-button:hover {
            background-color: #1d4ed8;
        }
        .chat-message {
            padding: 10px;
            margin: 5px;
            border-radius: 10px;
            max-width: 80%;
        }
        .user-message {
            background-color: #2563eb;
            color: white;
            margin-left: auto;
        }
        .bot-message {
            background-color: #f3f4f6;
            color: #1f2937;
        }
        </style>
        """
        display(HTML(self.style))

        # Create widgets
        self.setup_widgets()

        # Initialize state
        self.current_user_profile = None

    def setup_model(self):
        try:
            model_name = "TheBloke/Mistral-7B-Instruct-v0.1-GPTQ"
            self.tokenizer = AutoTokenizer.from_pretrained(model_name)
            self.model = AutoModelForCausalLM.from_pretrained(
                model_name,
                device_map="auto",
                torch_dtype=torch.float16,
                trust_remote_code=True
            )
            self.mistral_pipe = pipeline(
                "text-generation",
                model=self.model,
                tokenizer=self.tokenizer,
                torch_dtype=torch.float16,
            )
        except Exception as e:
            print(f"Error loading model: {e}")
            self.mistral_pipe = None

    def setup_mongodb(self):
        try:
            self.client = MongoClient('mongodb+srv://pulipakaphanimeghana0106:GsJ5bLAGmYkcs3PE@cluster0.1lup4.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0')
            self.db = self.client['db1']
            self.collection = self.db['user_profiles']
        except Exception as e:
            print(f"Error connecting to MongoDB: {e}")
            self.collection = None

    def setup_widgets(self):
        # Header
        self.header = widgets.HTML(
            value='<h1 style="color: #1e40af; text-align: center; padding: 20px; background-color: #f3f4f6; border-radius: 10px; margin-bottom: 20px;">🤖 Verizon Support Agent</h1>'
        )

        # MTN Section
        self.mtn_input = widgets.Text(
            placeholder='Enter your 10-digit MTN',
            layout=widgets.Layout(width='300px', margin='10px')
        )
        self.mtn_button = widgets.Button(
            description='Connect',
            button_style='primary',
            layout=widgets.Layout(width='150px', margin='10px')
        )

        # Menu Section
        self.menu_buttons = [
            widgets.Button(
                description=desc,
                button_style='info',
                layout=widgets.Layout(width='250px', margin='5px')
            )
            for desc in ['👤 Account Management', '📱 Plan Recommendation', '🛍️ Order Placement']
        ]

        # Chat Section
        self.chat_output = widgets.Output(
            layout=widgets.Layout(
                width='100%',
                height='400px',
                border='1px solid #e5e7eb',
                overflow_y='auto',
                padding='10px',
                margin='10px 0',
                border_radius='10px'
            )
        )
        self.chat_input = widgets.Text(
            placeholder='Type your message...',
            layout=widgets.Layout(width='70%', margin='10px')
        )
        self.send_button = widgets.Button(
            description='Send',
            button_style='primary',
            layout=widgets.Layout(width='15%', margin='10px')
        )
        self.exit_button = widgets.Button(
            description='Exit',
            button_style='danger',
            layout=widgets.Layout(width='15%', margin='10px')
        )

        # Bind events
        self.mtn_button.on_click(self.handle_mtn_submit)
        self.send_button.on_click(self.handle_send_message)
        self.exit_button.on_click(self.handle_exit)
        for button in self.menu_buttons:
            button.on_click(self.handle_menu_selection)

        # Main container
        self.main_container = widgets.VBox([
            self.header,
            widgets.VBox([
                self.mtn_input,
                self.mtn_button
            ], layout=widgets.Layout(align_items='center'))
        ])

    def query_mistral(self, user_input):
        if not self.current_user_profile:
            return "Please connect with your MTN first."

        profile_context = (
            f"User Profile:\n"
            f"- Account Balance: ${self.current_user_profile['AccountBalance']}\n"
            f"- Data Used: {self.current_user_profile['DataUsedGB']}GB / {self.current_user_profile['DataLimitGB']}GB\n"
            f"- Current Plan: {self.current_user_profile['PlanType']}\n"
            f"- Name: {self.current_user_profile['Name']}\n"
            f"User Query: {user_input}\n"
            f"Assistant:"
        )

        try:
            response = self.mistral_pipe(
                profile_context,
                max_length=500,
                do_sample=True,
                temperature=0.6,
                pad_token_id=self.tokenizer.eos_token_id,
                truncation=True,
            )[0]["generated_text"]

            if "Assistant:" in response:
                response = response.split("Assistant:")[-1].strip()
            return response
        except Exception as e:
            return f"I apologize, but I'm having trouble generating a response. Please try again."

    def display_message(self, message, is_user=False):
        with self.chat_output:
            style = "user-message" if is_user else "bot-message"
            time = datetime.now().strftime("%H:%M")
            display(HTML(
                f'<div class="chat-message {style}">'
                f'<div><strong>{"You" if is_user else "Bot"}</strong> - {time}</div>'
                f'<div>{message}</div>'
                '</div>'
            ))

    def handle_mtn_submit(self, b):
        mtn = self.mtn_input.value
        if len(mtn) == 10 and mtn.isdigit():
            # Fetch user profile from MongoDB
            self.current_user_profile = self.collection.find_one({"PhoneNumber": mtn})
            if self.current_user_profile:
                # Switch to chat view
                self.main_container.children = [
                    self.header,
                    widgets.HBox([
                        widgets.VBox(self.menu_buttons, layout=widgets.Layout(width='250px', margin='10px')),
                        widgets.VBox([
                            self.chat_output,
                            widgets.HBox([self.chat_input, self.send_button, self.exit_button])
                        ], layout=widgets.Layout(width='700px'))
                    ])
                ]
                self.display_message(f"Welcome {self.current_user_profile['Name']}! How can I help you today?")
            else:
                self.display_message("MTN not found in our database. Please try again.")
        else:
            self.display_message("Please enter a valid 10-digit MTN number.")

    def handle_menu_selection(self, b):
        category = b.description.split(' ')[1]  # Remove emoji
        message = f"I'd like help with {category}"
        self.display_message(message, True)
        response = self.query_mistral(message)
        self.display_message(response)

    def handle_send_message(self, b):
        message = self.chat_input.value
        if message.strip():
            self.display_message(message, True)
            response = self.query_mistral(message)
            self.display_message(response)
            self.chat_input.value = ""

            if "thank you" in message.lower():
                self.display_message("You're welcome! What else would you like help with?")

    def handle_exit(self, b):
        if hasattr(self, 'exit_dialog'):
            self.exit_dialog.close()

        self.exit_dialog = widgets.VBox([
            widgets.HTML('<h3>Are you sure you want to exit?</h3>'),
            widgets.HBox([
                widgets.Button(description='Yes', button_style='danger'),
                widgets.Button(description='No', button_style='primary')
            ])
        ])

        def on_confirm(b):
            if b.description == 'Yes':
                self.current_user_profile = None
                self.main_container.children = [
                    self.header,
                    widgets.VBox([
                        self.mtn_input,
                        self.mtn_button
                    ], layout=widgets.Layout(align_items='center'))
                ]
                with self.chat_output:
                    clear_output()
            self.exit_dialog.close()

        for button in self.exit_dialog.children[1].children:
            button.on_click(on_confirm)

        display(self.exit_dialog)

    def display(self):
        display(self.main_container)

# Create and display the chatbot
chatbot = VerizonChatbotUI()
chatbot.display()